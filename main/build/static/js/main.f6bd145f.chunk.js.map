{"version":3,"sources":["components/home.tsx","components/games/scattergories/game/timer.tsx","components/games/scattergories/game/listItem.tsx","components/games/scattergories/game/utils.ts","components/games/scattergories/game/userInputs.tsx","components/games/scattergories/game/game.tsx","components/games/scattergories/rules/acceptableAnswers.tsx","components/games/scattergories/game/index.tsx","components/games/scattergories/rules/rules.tsx","components/games/scattergories/roadmap/roadmap.tsx","components/games/hangman/game/game.tsx","components/games/hangman/rules/rules.tsx","components/games/hangman/roadmap/roadmap.tsx","components/games/millionaire/game.tsx","components/games/tail_chase/nothing.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","className","Timer","props","minutesLeft","Math","floor","time","secondsLeft","formattedSecondsLeft","ListItem","index","listItem","SingleInput","label","prompt","type","value","submittedAnswer","userInput","id","disabled","onChange","event","handleText","target","checked","correct","UserInputs","answers","map","key","handleCheck","prompts","Game","useState","list","setList","letter","setLetter","connection","setConnection","timeRemaining","setTimeRemaining","disableInputs","setDisableInputs","disableStartButton","setDisableStartButton","disableGenerateButton","setDisableGenerateButton","initialValues","Array","from","length","setAnswers","useEffect","socketio","on","handleStart","emit","limit","i","timer","setInterval","prevTime","clearInterval","countdownTimer","points","reduce","acc","cur","onClick","answer","newAnswers","input","text","newText","AcceptableAnswers","Scattergories","showAcceptableAnswers","setShowAcceptableAnswers","Rules","Roadmap","Hangman","defaultColor","apply","_x","_i","word","setWord","wordToDashes","dashes","setDashes","attempts","setAttempts","guessedLetters","setGuessedLetters","color","setColor","flavorText","setFlavorText","disableLetters","setDisableLetters","disableGenerateWord","setDisableGenerateWord","disableStart","setDisableStart","disableGiveUp","setDisableGiveUp","console","log","attemptsRemaining","handleLetterClick","e","currentTarget","getAttribute","parseInt","includes","newColor","slice","toUpperCase","push","String","fromCharCode","toLowerCase","style","Millionaire","question","setQuestion","TailChase","App","Navbar","bg","variant","Nav","NavDropdown","title","Item","href","path","exact","component","ScattergoriesRules","ScattergoriesRoadmap","HangmanRules","HangmanRoadmap","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f6bd145f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Home() {\r\n  return(\r\n    <div>\r\n      <div className=\"text-center\">\r\n        <h1 className=\"py-4 mt-4\">Welcome to the Minigame Collection!</h1>\r\n        <h4>Please select an option above.</h4>\r\n      </div>\r\n      <div className=\"ml-1 fixed-bottom\">\r\n        <div>I do not own any of these games, nor do I own any related properties.</div>\r\n        <div>All rights go to their respective owners.</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\n\r\nexport default function Timer(props: {time: number}) {\r\n  const minutesLeft = Math.floor(props.time / 60)\r\n  const secondsLeft = props.time % 60\r\n  const formattedSecondsLeft = secondsLeft < 10 ? `${0}${secondsLeft}` : secondsLeft\r\n  return(\r\n    <div>\r\n      <h2>{minutesLeft}:{formattedSecondsLeft}</h2>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport { categoryLabels } from './utils'\r\nimport './listItem.css'\r\n\r\nexport default function ListItem(props: { index: number, listItem: string }) {\r\n  return (\r\n    <span className=\"list-item\">{categoryLabels(props.index)}) {!props.listItem ? \"Generate a list before you start!\" : props.listItem}</span>\r\n  )\r\n}","// renders category list numbers\r\nexport const categoryLabels = (index: number) => {\r\n  return (index < 9) ? `0${index + 1}` : `${index + 1}`\r\n}","import React from 'react'\r\nimport { SubmittedAnswer } from './game'\r\nimport ListItem from './listItem'\r\n\r\n// render for a single input field\r\nconst SingleInput = (\r\n  props: {\r\n    submittedAnswer: SubmittedAnswer,\r\n    index: number,\r\n    disabled: boolean,\r\n    onChange: (index: number) => void,\r\n    handleText: (input: string, index: number) => void,\r\n    prompt: string\r\n  }\r\n) => {\r\n  let label = (props.index < 9) ? `0${props.index + 1}` : `${props.index + 1}`\r\n\r\n  // targets user input for each input field and stores it in state\r\n  const onTextChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    props.handleText(event.target.value, props.index)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <span>\r\n        <ListItem listItem={props.prompt} index={props.index} />\r\n      </span>\r\n      <span>\r\n        <label>{label})</label>\r\n        <input \r\n          className=\"mx-1\"\r\n          type=\"text\"\r\n          value={props.submittedAnswer.userInput}\r\n          id={`input${label}`}\r\n          disabled={props.disabled}\r\n          onChange={onTextChange}\r\n        ></input>\r\n        <input \r\n          type=\"checkbox\"\r\n          checked={props.submittedAnswer.correct}\r\n          onChange={() => props.onChange(props.index)}\r\n        ></input>\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\n\r\n// render for all 12 inputs\r\nexport default function UserInputs(\r\n  props: {\r\n    disabled: boolean,\r\n    answers: SubmittedAnswer[],\r\n    handleCheck: (index: number) => void,\r\n    handleText: (input: string, index: number) => void,\r\n    prompts: string[]\r\n  }\r\n) {\r\n  return (\r\n    <div>\r\n      <div className=\"d-flex flew-row justify-content-center\">\r\n        <form>\r\n          {props.answers.map((value, index) => {\r\n            return <SingleInput\r\n              submittedAnswer={value}\r\n              index={index}\r\n              key={index}\r\n              disabled={props.disabled}\r\n              onChange={(index) => props.handleCheck(index)}\r\n              handleText={props.handleText}\r\n              prompt={props.prompts[index]} \r\n            />\r\n          })}\r\n        </form>\r\n      </div>\r\n      <div className=\"d-flex justify-content-center\">\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport socketio, { Socket } from 'socket.io-client'\r\nimport Timer from './timer'\r\nimport UserInputs from './userInputs'\r\nimport './game.css'\r\n\r\n// TODO: set timer back to 3 minutes (maybe add settable timer?)\r\n// TODO: multiplayer functionality\r\n// TODO: scoreboard system\r\n// TODO: end-of-round individual answer reveal (multiplayer)\r\n// TODO: add more categories\r\n// TODO: addable/removable user inputs\r\n// TODO: adjustable/hideable timer (reappears when it hits 0? 5 seconds? 10 seconds?)\r\n\r\n\r\nexport interface SubmittedAnswer {\r\n  userInput: string,\r\n  correct: boolean,\r\n}\r\n\r\nexport default function Game () {\r\n\r\n  // various states for the game\r\n  const [list, setList] = useState<string[]>([])\r\n  const [letter, setLetter] = useState<string>()\r\n  const [connection, setConnection] = useState<typeof Socket>()\r\n  const [timeRemaining, setTimeRemaining] = useState<number>(180)\r\n  const [disableInputs, setDisableInputs] = useState<boolean>(true)\r\n  const [disableStartButton, setDisableStartButton] = useState<boolean>(true)\r\n  const [disableGenerateButton, setDisableGenerateButton] = useState<boolean>(false)\r\n\r\n  // initial answer/point values and another default state\r\n  const initialValues = Array.from({ length: 12 }).map(() => ({ userInput: \"\", correct: false })) as SubmittedAnswer[]\r\n  const [answers, setAnswers] = useState<SubmittedAnswer[]>(initialValues)\r\n\r\n  // initializes lobby and connects to source files\r\n  useEffect(\r\n    () => {\r\n      const connection = socketio('/lobby')\r\n      setConnection(connection)\r\n\r\n      // initializes list genration\r\n      connection.on('list_generated', (list: string[]) => {\r\n        setList(list)\r\n      })\r\n\r\n      // initializes random letter\r\n      connection.on('letter_generated', (letter: string) => {\r\n        setLetter(letter)\r\n      })\r\n\r\n      // initializes timer\r\n      connection.on('timer_ended', () => {})\r\n    },\r\n    []\r\n  )\r\n\r\n  // disables user inputs when timer reaches 0\r\n  useEffect(() => {\r\n    if (timeRemaining === 0) {\r\n      setDisableInputs(true)\r\n    }\r\n  }, [timeRemaining])\r\n\r\n  // starts and stops timer\r\n  const countdownTimer = (limit: number) => {\r\n    let i = 0;\r\n    let timer = setInterval(() => {\r\n      setTimeRemaining(prevTime => prevTime - 1)\r\n      if (i === limit - 1) {\r\n        clearInterval(timer)\r\n        setTimeRemaining(180)\r\n        setDisableGenerateButton(false)\r\n      }\r\n      i++\r\n    }, 1000)\r\n  }\r\n\r\n  // on button click -- generates a category list\r\n  const handleGenerateList = () => { \r\n    connection!.emit('generate_list')\r\n    setDisableStartButton(false)\r\n    setAnswers(initialValues)\r\n  }\r\n\r\n  // on button click -- sets time remaining, starts timer, enables inputs, disables start/list/letter buttons\r\n  const handleStart = () => {\r\n    connection!.emit('generate_letter')\r\n    // these two lines are used for building/testing purposes and are switched out for deployment\r\n    setTimeRemaining(5)\r\n    countdownTimer(5)\r\n    // setTimeRemaining(180)\r\n    // countdownTimer(180)\r\n    setDisableInputs(false)\r\n    setDisableStartButton(true)\r\n    setDisableGenerateButton(true)\r\n  }\r\n\r\n  // keeps track of checkboxes\r\n  const handleCheck = (index: number) => {\r\n    let answer = answers[index]\r\n    answer.correct = !answer.correct\r\n    let newAnswers = [...answers]\r\n    newAnswers[index] = answer\r\n    setAnswers(newAnswers)\r\n  }\r\n\r\n  // keeps track of text inputs\r\n  const handleText = (input: string, index: number) => {\r\n    let text = answers[index]\r\n    text.userInput = input\r\n    let newText = [...answers]\r\n    newText[index] = text\r\n    setAnswers(newText)\r\n  }\r\n\r\n  // game point system\r\n  const points = answers.reduce((acc, cur) => acc + (cur.correct ? 1 : 0), 0)\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"d-flex flew-row justify-content-center pt-4 pb-1\">\r\n        <div className=\"px-3\">\r\n          <button onClick={() => handleGenerateList()} disabled={disableGenerateButton}>Get a list!</button>\r\n        </div>\r\n        <div className=\"px-3\">\r\n          <button onClick={() => handleStart()} disabled={disableStartButton}>Start the game!</button>\r\n        </div>\r\n      </div>\r\n      <div className=\"d-flex flew-row justify-content-center py-2 info\">\r\n        <div className=\"px-4\">\r\n          <h2>Letter: {letter ? letter : \"?\"}</h2>\r\n        </div>\r\n        <div className=\"px-4\">\r\n          <Timer time={timeRemaining} />\r\n        </div>\r\n        <h2 className=\"px-4\">\r\n          Points: {points}\r\n        </h2>\r\n      </div>\r\n      <div className=\"d-flex flew-row justify-content-center\">\r\n        <UserInputs disabled={disableInputs} answers={answers} handleCheck={handleCheck} handleText={handleText} prompts={list} />\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport './rules.css'\r\n\r\nexport default function AcceptableAnswers() {\r\n  return(\r\n    <div className=\"mt-4\">\r\n      <h3 className=\"text-center mb-3\">Rules for Acceptable Answers</h3>\r\n      <ul className=\"list-group list\">\r\n        <li className=\"my-1\">Answers must fit their respective category.</li>\r\n        <li className=\"my-1\">The first word of your answer must begin with the key letter.</li>\r\n        <li className=\"my-1\">The articles \"A\", \"An\", and \"The\" do not count.</li>\r\n        <li className=\"my-1\">The same answer cannot be given more than once in the same round.</li>\r\n        <li className=\"my-1\">If two or more players give the same answer for the same category, their answers cancel out.</li>\r\n        <li className=\"my-1\">When answering with a proper name, you may use the first or last name.</li>\r\n        <li className=\"my-1\">Creative answers can be acceptable, but generally, just using an adjective is not.</li>\r\n        <li className=\"my-1\">Answers can (and likely will) be contested, and are ultimately decided on by a majority vote.</li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}","import React, { useState } from 'react'\r\nimport Game from './game'\r\nimport AcceptableAnswers from '../rules/acceptableAnswers'\r\n\r\nexport default function Scattergories() {\r\n\r\n  // sets state to show/hide acceptable answer rules\r\n  const [showAcceptableAnswers, setShowAcceptableAnswers] = useState<boolean>(false)\r\n\r\n  return(\r\n    <>\r\n      <Game />\r\n      <div >\r\n        <div className=\"text-center pt-3\">\r\n          <button onClick={() => setShowAcceptableAnswers(!showAcceptableAnswers)}>Need help?</button>\r\n        </div>\r\n            \r\n        <div className=\"d-flex flex-row justify-content-center\">\r\n          <div className=\"d-flex flex-column\">\r\n            {showAcceptableAnswers && <AcceptableAnswers />}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}","import React from 'react'\r\nimport AcceptableAnswers from './acceptableAnswers'\r\nimport './rules.css'\r\n\r\nexport default function Rules() {\r\n  return (\r\n    <div className=\"d-flex flex-row justify-content-center\">\r\n      <div className=\"d-flex flex-column\">\r\n        <div className=\"pt-4 pb-3 mt-4\">\r\n          <h2 className=\"text-center mb-3\">How to Play</h2>\r\n          <ul className=\"list-group list\">\r\n            <li className=\"my-1\">The game is played in three rounds. One round is played as follows:</li>\r\n            <li className=\"my-1\">Each player will have three minutes to fill in their form fields with answers.</li>\r\n            <li className=\"my-1\">Pressing the \"Generate a list!\" button will generate a list of categories.</li>\r\n            <li className=\"my-1\">Pressing the \"Start the game!\" button will select a random key letter and start the timer.</li>\r\n            <li className=\"my-1\">Once the timer has expired, the round is over.</li>\r\n            <li className=\"my-1\">Players reveal their answers in turn and compare them to other players' answers.</li>\r\n            <li className=\"my-1\">One point is awarded per acceptable answer. Points are tallied at the end of the round.</li>\r\n          </ul>\r\n        </div>\r\n        <AcceptableAnswers />\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\n\r\nexport default function Roadmap() {\r\n  return (\r\n    <>\r\n      <div className=\"text-center\">\r\n        <h2 className=\"py-4 mt-4\">Upcoming Features</h2>\r\n        <ul className=\"list-group\">\r\n          <li className=\"my-1\">multiplayer functionality</li>\r\n          <li className=\"my-1\">individual answer reveals</li>\r\n          <li className=\"my-1\">round selection</li>\r\n          <li className=\"my-1\">scoreboard system</li>\r\n          <li className=\"my-1\">adjustable/hideable timer</li>\r\n          <li className=\"my-1\">adjustable number of inputs</li>\r\n          <li className=\"my-1\">more categories</li>\r\n        </ul>\r\n      </div>\r\n    </>\r\n  )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport socketio, { Socket } from 'socket.io-client'\r\nimport './game.css'\r\n\r\n// TODO: add whole-word guess text input\r\n// TODO: figure out recursion thing\r\n// TODO: add start flavor text OR rip out the whole thing\r\n\r\nexport default function Hangman() {\r\n\r\n  const defaultColor = Array.apply(null, Array(26)).map((_x, _i) => '')\r\n\r\n  // various states for the game\r\n  const [connection, setConnection] = useState<typeof Socket>()\r\n  const [word, setWord] = useState<string[]>([\"-\"])\r\n  // ! const [recursion, setRecursion] = useState<boolean>(false)\r\n\r\n  // on word generation -- converts word to dashes\r\n  const wordToDashes = (word: string[]) => {\r\n    let wordDashes = Array.apply(null, Array(word.length)).map(() => \"-\")\r\n    return wordDashes\r\n  }\r\n\r\n  const [dashes, setDashes] = useState<string[]>(wordToDashes(word))\r\n  const [attempts, setAttempts] = useState<number>(0)\r\n  const [guessedLetters, setGuessedLetters] = useState<string[]>([])\r\n  const [color, setColor] = useState<string[]>(defaultColor)\r\n  const [flavorText, setFlavorText] = useState<string>('')\r\n  const [disableLetters, setDisableLetters] = useState<boolean>(true)\r\n  const [disableGenerateWord, setDisableGenerateWord] = useState<boolean>()\r\n  const [disableStart, setDisableStart] = useState<boolean>(true)\r\n  const [disableGiveUp, setDisableGiveUp] = useState<boolean>(true)\r\n\r\n  // initializes lobby and connects to source files\r\n  useEffect(\r\n    () => {\r\n      const connection = socketio('/lobby')\r\n      setConnection(connection)\r\n\r\n      // initializes word generation\r\n      connection.on('word_generated', (word: string[]) => {\r\n        setWord(word)\r\n        console.log(word.length)\r\n        console.log(word)\r\n        setDashes(wordToDashes(word))\r\n        attemptsRemaining(word)\r\n        setColor(defaultColor)\r\n        setDisableStart(false)\r\n      })\r\n    },\r\n    []\r\n  )\r\n\r\n  // determines remaining attempts at start of game\r\n  const attemptsRemaining = (word: string[]) => {\r\n    if (word.length <= 10) {\r\n      setAttempts(15)\r\n    } else {\r\n      setAttempts(20)\r\n    }\r\n    return attempts\r\n  }\r\n\r\n  // generate word button handler\r\n  const handleGenerateWord = () => {\r\n    connection?.emit('generate_word')\r\n  }\r\n\r\n  // start button handler\r\n  const handleStart = () => {\r\n    setDashes(wordToDashes(word))\r\n    setDisableLetters(false)\r\n    setGuessedLetters([])\r\n    attemptsRemaining(word)\r\n    setDisableGenerateWord(true)\r\n    setDisableStart(true)\r\n    setDisableGiveUp(false)\r\n  }\r\n\r\n  // give up button handler\r\n  const handleGiveUp = () => {\r\n    setDisableGenerateWord(false)\r\n    setDisableStart(false)\r\n    setDisableLetters(true)\r\n    setDisableGiveUp(true)\r\n  }\r\n\r\n  // on click -- deals with guess correctness and alphabet array colors\r\n  const handleLetterClick = (e: React.MouseEvent<HTMLElement>) => {\r\n    let letter = e.currentTarget.getAttribute('value')!\r\n    let id = parseInt(e.currentTarget.getAttribute('id')!)\r\n    // if word includes guess, then color changes and dashes are replaced\r\n    if (word.includes(letter)) {\r\n      const newColor = [...color.slice(0, id), '#1E88E5', ...color.slice(id + 1)]\r\n      setColor(newColor)\r\n      for (let i = 0; i < word.length; i++) {\r\n        if (word[i] === letter) {\r\n          dashes[i] = letter.toUpperCase()\r\n        }\r\n      }\r\n    } \r\n    // if not, then only color changes\r\n    else {\r\n      const newColor = [...color.slice(0, id), '#D81B6099', ...color.slice(id + 1)]\r\n      setColor(newColor)\r\n    }\r\n    // ensures guessedLetters doesn't accrue repeats and also\r\n    // reduces remaining attempts when a new letter is clicked\r\n    if (!guessedLetters.includes(letter)) {\r\n      guessedLetters.push(letter)\r\n      setAttempts(attempts! - 1)\r\n    }\r\n  }\r\n\r\n  // forces user to start new game on win or loss\r\n  useEffect(() => {\r\n    if (!dashes.includes('-') || attempts === 0) {\r\n      setDisableGenerateWord(false)\r\n      setDisableStart(true)\r\n      setDisableLetters(true)\r\n      setDisableGiveUp(true)\r\n    }\r\n  }, [dashes, attempts])\r\n\r\n  // maps out array of clickable letters\r\n  const alphabetArray = () => {\r\n    let alphabet = Array.apply(null, Array(26)).map((_x, i) => \r\n      <button \r\n        className=\"alphabet\"\r\n        key={i}\r\n        id={`${i}`}\r\n        value={`${String.fromCharCode(65 + i).toLowerCase()}`}\r\n        style={{color: color[i]}}\r\n        onClick={handleLetterClick}\r\n        disabled={disableLetters}\r\n      >\r\n        {String.fromCharCode(65 + i)}\r\n      </button>\r\n    )\r\n    return alphabet\r\n  }\r\n\r\n  // adds flavor text best on number of attempts remaining\r\n  useEffect(() => {\r\n    if (attempts === 0 && dashes.includes('-')) {\r\n      setFlavorText('Nice try! Play again?')\r\n    } else if (!dashes.includes('-')) {\r\n      setFlavorText('Nice job! Play again?')\r\n    } else if(attempts <= 5 && attempts > 0) {\r\n      setFlavorText('Be careful!')\r\n    } else if (attempts <= 10 && attempts > 5) {\r\n      setFlavorText(\"You've got this!\")\r\n    } else if (attempts > 10) {\r\n      setFlavorText('Give it your best shot!')\r\n    }\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex flew-row justify-content-center pt-4 pb-1\">\r\n        <div className=\"px-3\">\r\n          <button onClick={() => handleGenerateWord()} disabled={disableGenerateWord}>Get a word!</button>\r\n        </div>\r\n        <div className=\"px-3\">\r\n          <button onClick={() => handleStart()} disabled={disableStart}>Start the game!</button>\r\n        </div>\r\n        <div className=\"px-3\">\r\n          <button onClick={() => handleGiveUp()} disabled={disableGiveUp}>Give up?</button>\r\n        </div>\r\n      </div>\r\n      <div className=\"d-flex flew-row justify-content-center py-3 my-1\">\r\n        <h3>\r\n          Attempts Remaining: {attempts}\r\n        </h3>\r\n      </div>\r\n      <div className=\"d-flex flew-row justify-content-center py-2\">\r\n        <h1 className=\"dashes\">{dashes}</h1>\r\n      </div>\r\n      <div className=\"d-flex flew-row justify-content-center py-2\">\r\n        <h1 className=\"alphabet-container\">\r\n          {alphabetArray()}\r\n        </h1>\r\n      </div>\r\n      <div className=\"d-flex flew-row justify-content-center py-2\">\r\n        <h4>\r\n          {flavorText}\r\n        </h4>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport './rules.css'\r\n\r\nexport default function Rules() {\r\n  return (\r\n    <div className=\"d-flex flex-row justify-content-center\">\r\n      <div className=\"d-flex flex-column\">\r\n        <div className=\"pt-4 pb-3 mt-4\">\r\n          <h2 className=\"text-center mb-3\">How to Play</h2>\r\n          <ul className=\"list-group list\">\r\n            <li className=\"my-1\">A series of blanks will appear on the screen.</li>\r\n            <li className=\"my-1\">These represent the letters in the answer word.</li>\r\n            <li className=\"my-1\">Click on a letter in the letter pool to guess.</li>\r\n            <li className=\"my-1\">Correct letters will turn green, and incorrect letters will turn red.</li>\r\n            <li className=\"my-1\">The game ends when you guess the word correctly or run out of lives.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\n\r\nexport default function Roadmap() {\r\n  return (\r\n    <>\r\n      <div className=\"text-center\">\r\n        <h2 className=\"py-4 mt-4\">Upcoming Features</h2>\r\n        <ul className=\"list-group\">\r\n          <li className=\"my-1\">a fun little easter egg</li>\r\n          <li className=\"my-1\">score tracker</li>\r\n          <li className=\"my-1\">even more words!</li>\r\n          <li className=\"my-1\">an actual man who hangs, maybe</li>\r\n        </ul>\r\n      </div>\r\n    </>\r\n  )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport socketio, { Socket } from 'socket.io-client'\r\n\r\ninterface Answer {\r\n  text: string,\r\n  isCorrect: boolean\r\n}\r\n\r\ninterface Question {\r\n  prompt: string,\r\n  pointValue: number,\r\n  answers: Answer[]\r\n}\r\n\r\nexport default function Millionaire() {\r\n  const [connection, setConnection] = useState<typeof Socket>()\r\n  const [question, setQuestion] = useState<Question | null>(null)\r\n\r\n  useEffect(\r\n    () => {\r\n      const connection = socketio('/lobby')\r\n      setConnection(connection)\r\n\r\n      // initializes question generation\r\n      connection.on('question_generated', (question: Question) => {\r\n        setQuestion(question)\r\n        console.log(question)\r\n      })\r\n    },\r\n    []\r\n  )\r\n  \r\n  // this functionality with later be broken into two parts:\r\n  // \"start\" button to begin game and \"next\" button to continue playing,\r\n  // unless I decide to automatically present next question on correct answer after short timer\r\n  const handleGenerateQuestion = () => {\r\n    connection!.emit('generate_question')\r\n  }\r\n\r\n  // TODO: helper function to randomize answers that is called on 'get a question'\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <div>\r\n          <button onClick={() => handleGenerateQuestion()}>Get a question!</button>\r\n        </div>\r\n        <div className=\"d-flex flew-row justify-content-center pt-4 pb-1\">\r\n          {question?.prompt}\r\n        </div>\r\n        <div>\r\n          {question?.answers?.map((answer) => \r\n            <div key={answer.text}>\r\n              {answer.text}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}","import React from 'react'\r\n\r\nexport default function TailChase() {\r\n  return (\r\n    <h3 className=\"text-center mb-3 pt-4 mt-4\">Nothing to see here quite yet!</h3>\r\n  )\r\n}","import React from 'react'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport './App.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { Nav, Navbar, NavDropdown } from 'react-bootstrap'\r\nimport Home from './components/home'\r\nimport Scattergories from './components/games/scattergories/game'\r\nimport ScattergoriesRules from './components/games/scattergories/rules/rules'\r\nimport ScattergoriesRoadmap from './components/games/scattergories/roadmap/roadmap'\r\n//millionaire will go here, nestled in like a cute lil bug in the dirt\r\nimport Hangman from './components/games/hangman/game/game'\r\nimport HangmanRules from './components/games/hangman/rules/rules'\r\nimport HangmanRoadmap from './components/games/hangman/roadmap/roadmap'\r\n\r\n// these are temporary, but cheetos are forever\r\n// TODO: update millionaire now that work has begun\r\nimport Millionaire from './components/games/millionaire/game'\r\n\r\nimport TailChase from './components/games/tail_chase/nothing'\r\n\r\nexport default function App() {\r\n  return (\r\n    <>\r\n      <Navbar bg=\"dark\" variant=\"dark\">\r\n        <Nav className=\"m-auto\">\r\n          <NavDropdown title=\"Scattergories\" className=\"mx-2\" id=\"collasible-nav-dropdown\">\r\n            <NavDropdown.Item href=\"/scattergories\">Play</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"/scattergories/rules\">Rules</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"/scattergories/roadmap\">Roadmap</NavDropdown.Item>\r\n          </NavDropdown>\r\n\r\n          <NavDropdown title=\"Hangman\" className=\"mx-2\" id=\"collasible-nav-dropdown\">\r\n            <NavDropdown.Item href=\"/hangman\">Play</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"/hangman/rules\">Rules</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"/hangman/roadmap\">Roadmap</NavDropdown.Item>\r\n          </NavDropdown>\r\n\r\n          <NavDropdown title=\"Millionaire\" className=\"mx-2\" id=\"collasible-nav-dropdown\">\r\n            <NavDropdown.Item href=\"/millionaire\">Play</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"/millionaire/rules\">Rules</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"/millionaire/roadmap\">Roadmap</NavDropdown.Item>\r\n          </NavDropdown>\r\n\r\n          <NavDropdown title=\"Tail Chase\" className=\"mx-2\" id=\"collasible-nav-dropdown\">\r\n            <NavDropdown.Item href=\"/tail_chase\">Play</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"/tail_chase/rules\">Rules</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"/tail_chase/roadmap\">Roadmap</NavDropdown.Item>\r\n          </NavDropdown>\r\n\r\n        </Nav>\r\n      </Navbar>\r\n      \r\n      <Router>\r\n        <Route path=\"/\" exact component={Home} />\r\n\r\n        <Route path=\"/scattergories\" exact component={Scattergories} />\r\n        <Route path=\"/scattergories/rules\" exact component={ScattergoriesRules} />\r\n        <Route path=\"/scattergories/roadmap\" exact component={ScattergoriesRoadmap} />\r\n\r\n        <Route path=\"/hangman\" exact component={Hangman} />\r\n        <Route path=\"/hangman/rules\" exact component={HangmanRules} />\r\n        <Route path=\"/hangman/roadmap\" exact component={HangmanRoadmap} />\r\n\r\n        <Route path=\"/millionaire\" exact component={Millionaire} />\r\n        <Route path=\"/millionaire/rules\" exact component={Millionaire} />\r\n        <Route path=\"/millionaire/roadmap\" exact component={Millionaire} />\r\n\r\n        <Route path=\"/tail_chase\" exact component={TailChase} />\r\n        <Route path=\"/tail_chase/rules\" exact component={TailChase} />\r\n        <Route path=\"/tail_chase/roadmap\" exact component={TailChase} />\r\n      </Router>\r\n    </>\r\n  )\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}